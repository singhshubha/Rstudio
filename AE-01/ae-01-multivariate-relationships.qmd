---
title: "AE 01: Multivariate Relationships"
editor: visual
format:
  html:
    embed-resources: true
---

::: callout-important
-   For this exercise, you will work in groups, but everyone will work through the document and submit their solution.

-   Open [RStudio](https://rstudio.collegeofidaho.edu/) and create a subfolder in your AE folder called "AE-01"

-   Go to the [Canvas](https://cofi.instructure.com/courses/17093/assignments/202857) and locate your `AE 01` assignment to get started.

-   Upload the `ae-01.qmd` files into the folder you just created. The `.qmd` and `.html` responses are due in Canvas no later than Monday, January 6th at 1:00pm.
:::

```{r}
#| include: FALSE
knitr::opts_chunk$set(warning = FALSE, 
                      message = FALSE)
```

# Getting Started with R, RStudio, and Quarto

## Quarto

The thing you are reading right now is an **Quarto** document (very similar to R Markdown if you've ever used that). Quarto runs *inside* R Studio. Quarto is a simple formatting syntax for authoring web pages, word documents, pdfs, and many more file types. You can find the link to a useful Quarto guide [here](https://quarto.org/docs/guide/).

When you click the **Render** button at the top of this window an html file will be generated that includes both content as well as the output of any embedded R code chunks within the document. Not only can you embed the R *code*, you can embed the *output* produced by the R code. In this way, your analysis is fully reproducible and updatable. **All of your homework assignments must be prepared using Quarto**.

The nice thing about Quarto is that you can write prose (as I am doing now), mathematical equations using LaTeX syntax (like $y_i = a + b x_i$), and R code/output/plots all in one synthesized document. This makes it approximately 10,000 times easier to use than doing the same thing in Word or LaTeX. As you go through this introduction, I recommend that you look also at the .qmd file and your output file side-by-side to get an idea of how Quarto works. (Since you're going to have to use Quarto this semester, you might as well start learning it now!)

In the future, I will typically give you a Quarto template to fill out. However, occasionally you will need to create your own Quarto document. When you want to start a new Quarto document, click "File \> New File \> Quarto Document..." Put yourself as author, and make sure to give it a descriptive title!

### Exercise 1

Click Render at the top of this document. Show Dr. Friedlander before moving on.

## Using R as a Calculator and Running Code within a Quarto Document

With R by your side, you will never need your TI-84 again. Consider the simple arithmetic in the chunk below. You can run this code chunk all at once by clicking the *Run* button, the sideways green arrow in the top right of the chunk. Notice the interactive nature of the output. You can click through to see the different pieces of output.

**As you work through this document, you should Run each chunk as you come to it.**

### Exercise 2

Run the code chunk below.

```{r}
5 + 3

5.3 * 23.4

sqrt(16) # this is a comment.  R will not 'see' anything past a #, but you can use it to explain your code
```

Look closely at how Quarto denotes the R code and the output. Also note in the .qmd file how I include R code as separate from prose. These are called "chunks". The easiest way to add a new chunk is to click on the green "c" icon with a plus in the corner above, then choose "R". R code that is not inside of a chunk *will not* be run by Quarto!

### Exercise 3

Create an R code chunk and compute the log of 10 using the function `log`. Why do you think the answer isn't 1?

```{r}
log(10)
# i think the answer is not 1 in this case because r studio take log as ln 
#(basically it take log as log with base e)and thevalue of ln10 is 2.30... 
#but i looked up that if we specify the value of base which in this case 
#would be 10, would give 1. 
log(10, base=10)
```

### Exercise 4

You can also save values to named variables, to be used later:

```{r}
product <- 15.3 * 23.4 #save result
```

If you save something like this, R will not show the output unless you expressly ask for it:

```{r}
product #show result
```

The symbol "\<-" is the *assignment operator*. If you've ever programmed before, it's essentially the same as "=" in this instance. There are cases where "\<-" works and "=" doesn't, so it's good to get into the habit of using "\<-" now.

Once variables are defined, they can be referenced with other operators and functions. Try executing each line of code individually by placing your cursor on the first line of the chunk below and pressing *Ctrl+Enter* (*Cmd +Enter* for Mac users); then do the same for the second line. (This is how you can run a single line within a larger chunk.)

```{r}
.5 * product # half of the product
product^(1/4) # fourth root of the product
```

### Exercise 5

You can also use in-line R code in Quarto, which can be useful when calling defined variables. Did you know that the natural log of `r product` is `r log(product)`?\

### Exercise 6

*Only R code (and comments) should be inside chunks.* Prose (interpretations/explanations/descriptions) should never be put inside a chunk; prose should be below or above the chunk, as I have done above (and continue to do throughout this document). You should also never cut-and-paste output or graphs into the chunks. The whole point of code chunks is that they contain the code *and* they'll run the code (resulting in the output and/or graphs).

If you want to run something in R but don't want it to appear in the Quarto document, simply run it in the **Console** in the lower-left quadrant of RStudio. Type the last line of R code above into the Console and see what happens.

```{r}
# It gave me the same output as the chunk above. 
```

# Multivariate Relationships and Exploratory Data Analysis (EDA) with R

## Carbohydrates and Starbucks

Starbucks often displays the total calories in their food items but not the other nutritional information. Carbohydrates are a body's main fuel source. The [Dietary Guidelines for America](https://www.mayoclinic.org/healthy-lifestyle/nutrition-and-healthy-eating/in-depth/carbohydrates/art-20045705) recommend that carbohydrates make up 45% to 65% of total daily calories. Our goal is to understand the relationship between the amount of carbohydrates and calories in Starbucks food items. We'd also like to assess if the relationship differs based on the type of food item (bakery, salad, sandwich, etc.)

You will now be introduced to the functions we will use most frequently for exploratory data analysis (EDA) in this class. If you are moderate to advanced R user, feel free to use whatever functions you'd like to accomplish the tasks. However, you should be prepared to answer questions about any uncited code which is not covered in this class on your oral exams. The first part of this document contains explanations for beginning R users, but **all students should work through the entire document**.

::: callout-important
In general, I suggest "rendering as you go": rendering every few chunks, to make sure things are rendering correctly, rather than waiting until the end of a document to render the whole thing (and potentially encountering lots of errors that you have to unpack)! I also ALWAYS suggest "saving as you go": it's a good idea to save every couple of minutes. (This is good practice for all your files.)
:::

### Exercise 7

The code below loads the package called `tidyverse` which provides many functions that will be useful for manipulating data and the package called `mosaic` which is useful for teaching statistics. Add another line that loads a package called `ggformula` which we will use to plot our data and a third that loads the package `openintro` which will contain our data for this activity. Note that `#| warning: FALSE` causes the code to run without displaying any associated warnings when you render. You will often see `#| eval: FALSE` which prevents the code chunk from running when you render the document. Throughout this course, make sure you remove these lines or change them to `#| eval: TRUE` whenever you reach them. The reason that are included in the first place is so I can write scaffolded and fill-in-the-blank type exercises for you. These will cause errors (since they are incomplete code) until you finish writing them.

```{r}
#| warning: FALSE
#| eval: TRUE

# load packages we typically use for this class.
library(tidyverse)
library(mosaic)
library(ggformula) # load ggformula
library(openintro) #load openintro
```

## Loading data

Doing statistics requires *data*. Sometimes we will have to load data from a file and sometimes we can get our data from an R package. Today's dataset, called `starbucks` is from the `openintro` package. To load a this data from within R you can use the `data` command.

### Exercise 8

Use the code below to load the dataset `starbucks`, which is part of the `openintro` package. Don't forget to change `eval: FALSE` to `eval: TRUE`... Why do you think we need `eval: FALSE` if you aren't actually rewriting any code?

```{r}
#| eval: TRUE

data("starbucks")
#from what i understand, eval = FALSE bascialy does not run the code. 
#it will display the code but does not run it. in this case, as a professor, 
#i think it is useful for you to leave it as eval = FALSE, 
#because you are running it rather showing it to us. 
#For us students, it is necessary to put eval = TRUE because 
#we are the ones who usually edit the code to submit the assignment. 
```

This is a great chance to remind you that R cares about letter case. This means that `data("starbucks")` works but `data("Starbucks")` doesn't!

### Inspecting the data source

Now you're ready to learn a little bit about the `starbucks` data set.

### Exercise 9

Run the code below and then edit the bulleted list below to add a short description in your own words describing what each function does. Hint: if it isn't clear based on the output you can use `?` before the function name in the console to bring up the documentation on that function. Notify Dr. Friedlander when you're finished.

```{r}
#| eval: TRUE

# Inspecting the data source
glimpse(starbucks)
head(starbucks)
names(starbucks)
```

-   `glimpse()` : This function gives a summary of the whole data set, including the total number of rows and columns.
-   `head()` : this function gives an organized table displaying the first few rows. I believe the default number is 6 rows.
-   `names()` : this function gives the names of the columns within the dataset.

### Exercise 10

Based on the output above, how many **observations** and how many **variables** does this data set have?\
Based on the output, there are 77 observations which will be the number of rows in this case because there are 77 different items and variable would be 7.

### Exercise 11

Let's do a little bit of a data prep. In the **console** type `?starbucks` and look at the definition of `type`.

The following is a little bit of data wrangling to get the source data in shape for our purposes. What do you think this code is doing? Make sure you change `eval: FALSE` to `eval: TRUE`.

```{r}
#| eval: TRUE

starbucks <- starbucks |> 
  mutate(bakery = factor(if_else(type == "bakery", "bakery", "non-bakery")))
```

Statisticians should always know something about the data domain in order to be useful. Why do you think we are changing our data like this?

to divide all the items in two distinct categories which is bakery and non-bakery.

## Exploratory Data Analysis

For the purposes of our class, it's useful to learn a model-centric approach to R. The pseudo-code below is going to be our foundation for the rest of the class:

`function( Y ~ X, data = DataSetName )`

Here's a short description of each part in the pseudo-code above:

-   `function` is an R function that dictates something you want to do with your data; for example,
    -   `mean` calculates the mean
    -   `lm` fits a linear regression model
-   `Y` is the outcome of interest (response variable)
-   `X` is some explanatory variable; you can use `1` as a placeholder if there is no explanatory variable
-   `DataSetName` is the name of a data set loaded into the R environment

Always start with clear research questions. Our question for this exercise:

> *How do the number of carbs compare for `bakery` and `non-bakery` items?*

The purpose of the exploratory data analysis (EDA) is to learn as much as you can about your research question **before doing any statistical modeling**. We basically want to try and answer the research question with EDA if possible...or at least have a guess as to what the answer "should" be. Then we use statistical models to formally accommodate variability in the data and calculate the uncertainty of our conclusions.

### Exercise 12

Use the R code chunk below to calculate the mean carbs by for bakery and non-bakery items. Summarize your observations below the code chunk.

```{r}
#| eval: TRUE

mean(carb ~ bakery, data = starbucks)
```

The mean number of calories of a bakery item at Starbucks is 20 more than a non-bakery item.

### Exercise 13

Of course, there are lots of other ways to summarize a numerical variable besides the mean. Use the R code chunk to calculate the other summary statistics for the number of carbs for `bakery` and `non-bakery` items using the function `favstats`. Summarize your observations below the code chunk.

(Hint: Do you not know how `favstats` works? Well, it's a function just like any other: it follows the syntax described at the top of this section! Also, you can always find details and examples by searching the Help menu in the lower-right quadrant.)

```{r}
favstats(carb ~ bakery, data = starbucks)
```

based on the table, we can see that the minimum amount of carbs is lower in a bakery than nonbakery items whereas the max amount of carbs is 20 carbs higher in a bakery than in nonbakery. mean is 20 carbs higher in a bakery than non-bakery and the median is 25 carbs higher in a bakery than nonbakery. also, carbs in bakery items seem to be more spread out than nonbakery items because of the higher sd in bakery item. and Q1 and Q3 represents than bakery items have about 50% of the items have calories above 47 and less than 62 and nonbakery items have 50% of the items have calories above 24 and less than 43.

### Exercise 14

Let's generate some univariate (i.e. one-variable) EDA plots for our three variables. In general, can use histograms or boxplots (`gf_histogram` or `gf_boxplot`) for quantitative variables and bar charts `gf_bar` for categorical variables. Fill in the blanks in the code below to generate the corresponding plots. Then create a boxplot of `carb`. Finally, share your observations below the code:

```{r}
#| eval: TRUE

# make a histogram of carb
gf_histogram(~ carb, data = starbucks)

# make a histogram of calories
gf_histogram(~ calories, data = starbucks)

# make a bar chart of bakery
gf_bar(~ bakery, data = starbucks)

# make a boxplot of carb
gf_boxplot(~ carb, data = starbucks)
```

From the first histogram, we see that we have 8 items close to 60 carbs. we also see we have fewer items that are high in carbs.\
From the second histogram, we observe that we do not have any items about 100 and about 250 calories. we have about 10 items with 350 calories. in general, the graph looks skewed to the left indicating we have more items with more than 300 calories. \
From the bar grapht, we observe that we have more bakery items(\~41) than non bakery items( \~36).

From the box plot, we see most of the values concentrate between 26 to 59. I believe that is Q3 minus Q1. The median is shown to be around 45.

### Exercise 15

Let's not generate some bivariate (i.e. two-variable) EDA plots for our three variables. For two-quantitative variables we typically use a scatter plot `gf_point`. If we are comparing a quantitative and a categorical variable will use side-by-side boxplots `gf_boxplot`. Generate and plot to visualize `carb` and `calories` and one to visualize `carb` and `bakery`. Comment on your observations.

```{r}
gf_point(calories ~ carb, data = starbucks)
gf_boxplot(carb ~ bakery, data = starbucks)
```

From the scatterplot, we observe that it forms a linear structure which says as the carbs go up, calories go up as well. 30-60 carbs show a relatively high number of calories and we see some outliers as well but they should not affect the gradual increase.

From the boxplot, we see the range for bakery items is about 33 to 80, and for non-bakery items is about 20 to 60. we also see some outliers in bakery items which is way below the range the median amount of carbs is about 58 in bakery items whereas the median amount of calories in non-bakery items is about 32.
